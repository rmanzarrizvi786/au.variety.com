<?php
/**
 * Ensure Apple News JSON will contain certain elements.
 *
 * @since 2020-07-15 ROP-2188
 *
 * @package pmc-apple-news
 */

namespace PMC\Apple_News;

use Admin_Apple_Async;
use Apple_Actions;
use PMC\Global_Functions\Traits\Singleton;

/**
 * Class JSON_Audit.
 */
class JSON_Audit {
	use Singleton;

	/**
	 * Meta key tracking retry attempts.
	 */
	public const META_KEY_AUDIT_RETRIES = '_pmc_apple_news_audit_retries';

	/**
	 * Meta key holding results of failed audits.
	 */
	public const META_KEY_BUY_NOW_BUTTONS = '_pmc_apple_news_audit_buy_now_buttons';

	/**
	 * JSON_Audit constructor.
	 */
	protected function __construct() {
		$this->_setup_hooks();
	}

	/**
	 * Register hooks.
	 */
	protected function _setup_hooks(): void {
		// Run after `\PMC\Apple_News\Content_Filter::init_buy_button_for_apple_news()`.
		add_action( 'init', [ $this, 'add_hooks_for_buy_now_button_check' ], 11 );
	}

	/**
	 * Conditionally register hooks for checking Buy Now button data.
	 */
	public function add_hooks_for_buy_now_button_check(): void {
		if ( ! apply_filters( 'pmc_apple_news_enable_buy_button', false ) ) {
			return;
		}

		add_action(
			'apple_news_before_async_push',
			[ $this, 'add_buy_now_button_check' ]
		);
		add_action(
			'apple_news_after_async_push',
			[ $this, 'remove_buy_now_button_check' ]
		);
		add_action(
			'apple_news_after_push',
			[ $this, 'remove_buy_now_button_check' ]
		);
	}

	/**
	 * Hook the buy-now-button check only when submitting asynchronously.
	 */
	public function add_buy_now_button_check(): void {
		// Run after buttons are generated by the `Content_Filter` class.
		add_filter(
			'apple_news_generate_json',
			[ $this, 'check_json_for_buy_now_buttons' ],
			999,
			2
		);
	}

	/**
	 * Clean up after verifying Buy Now buttons.
	 */
	public function remove_buy_now_button_check(): void {
		remove_filter(
			'apple_news_generate_json',
			[ $this, 'check_json_for_buy_now_buttons' ],
			999
		);
	}

	/**
	 * Confirm that Buy Now buttons are present before sending to Apple News.
	 *
	 * @param array $json    JSON generated for post.
	 * @param int   $post_id Post ID.
	 * @return array
	 */
	public function check_json_for_buy_now_buttons(
		array $json,
		int $post_id
	): array {
		$this->remove_buy_now_button_check();
		$this->_check_buy_now_buttons( $json, $post_id );

		return $json;
	}

	/**
	 * Verify data needed to add Buy Now Buttons, suspending submission to allow
	 * time for retries.
	 *
	 * @param array $json    Post's JSON representation.
	 * @param int   $post_id Post ID.
	 */
	protected function _check_buy_now_buttons( array $json, int $post_id ): void {
		$retries = (int) get_post_meta(
			$post_id,
			static::META_KEY_AUDIT_RETRIES,
			true
		);

		if ( 0 === $retries ) {
			delete_post_meta(
				$post_id,
				static::META_KEY_BUY_NOW_BUTTONS
			);
		}

		$shortcodes = array_merge(
			$this->_get_shortcodes_from_content( $post_id ),
			$this->_get_postmeta_asins_as_shortcodes( $post_id )
		);

		if ( empty( $shortcodes ) ) {
			return;
		}

		$products = $this->_extract_products_from_json( $json );

		$mismatches = [];

		foreach ( $shortcodes as $key => $shortcode_data ) {
			if ( ! isset( $products[ $key ] ) ) {
				$mismatches[] = [
					'error' => 'unmatched',
					'key'   => $key,
					'asin'  => $shortcode_data['asin'],
				];
			} elseif (
				false === stripos(
					$products[ $key ]['URL'],
					$shortcode_data['asin']
				)
			) {
				$mismatches[] = [
					'error' => 'mismatched',
					'key'   => $key,
					'asin'  => $shortcode_data['asin'],
					'url'   => $products[ $key ]['URL'],
				];
			}
		}

		unset( $key, $shortcode_data );

		$shortcode_count = count( $shortcodes );
		$product_count   = count( $products );
		if ( $shortcode_count !== $product_count ) {
			$mismatches['counts'] = [
				'shortcodes' => $shortcode_count,
				'products'   => $product_count,
			];
		}

		if ( empty( $mismatches ) ) {
			delete_post_meta(
				$post_id,
				static::META_KEY_AUDIT_RETRIES
			);

			return;
		}

		$this->_log_buy_now_audit(
			$post_id,
			$retries,
			$mismatches,
			$shortcodes,
			$products
		);
		unset( $mismatches, $shortcodes, $products );

		if ( $retries < 9 ) {
			update_post_meta(
				$post_id,
				static::META_KEY_AUDIT_RETRIES,
				++$retries
			);

			wp_schedule_single_event(
				time() + $this->_get_sleep(),
				Admin_Apple_Async::ASYNC_PUSH_HOOK,
				[
					$post_id,
					get_current_user_id(),
				]
			);

			// Unlock this post for the next attempt.
			delete_post_meta(
				$post_id,
				'apple_news_api_async_in_progress'
			);

			/**
			 * `\Admin_Apple_Async::async_push()` wraps the attempt in a
			 * try-catch, and we don't have the data at the
			 * `apple_news_skip_push` action to make the check there, leaving
			 * this as our only option to stop this attempt.
			 */
			$message  = 'Detected missing Buy Now buttons, retrying';
			$message .= " (ID: {$post_id}, retries: ${retries})";
			throw new Apple_Actions\Action_Exception( $message );
		}

		delete_post_meta( $post_id, static::META_KEY_AUDIT_RETRIES );
	}

	/**
	 * Extract Buy now shortcodes from raw post content.
	 *
	 * @param int $post_id Post ID.
	 * @return array
	 */
	protected function _get_shortcodes_from_content( int $post_id ): array {
		$shortcode_regex = get_shortcode_regex(
			[
				'buy-now',
			]
		);

		$raw_content = get_post_field(
			'post_content',
			$post_id,
			'raw'
		);

		$shortcodes_found = preg_match_all(
			"/$shortcode_regex/",
			$raw_content,
			$shortcodes
		);

		if ( ! $shortcodes_found ) {
			return [];
		}

		$buy_now_shortcodes = array_filter(
			array_map(
				'shortcode_parse_atts',
				(array) $shortcodes[3]
			),
			[
				$this,
				'_shortcode_is_buy_now',
			]
		);

		return array_values( $buy_now_shortcodes );
	}

	/**
	 * Retrieve ASINs from postmeta and transform them into shortcode attributes
	 * to facilitate comparison to products JSON. The Amazon Onsite plugin
	 * appends these products to post content as buy-now shortcodes, and themes
	 * that don't use the Onsite plugin follow a similar pattern, often via the
	 * configuration for the Store Products plugin.
	 *
	 * @param int $post_id
	 * @return array
	 */
	protected function _get_postmeta_asins_as_shortcodes( int $post_id ): array {
		/**
		 * Should audit consider products stored in postmeta, such as when they
		 * are appended to post content.
		 *
		 * @param bool Content includes products from postmeta.
		 * @param int  Post ID.
		 * @return bool
		 */
		if (
			! apply_filters(
				'pmc_apple_news_json_audit_content_includes_products',
				true,
				$post_id
			)
		) {
			return [];
		}

		$meta = get_post_meta( $post_id, '_amzn_product_information', true );

		if ( ! is_array( $meta ) ) {
			return [];
		}

		$reformatted = [];

		foreach ( $meta as $product ) {
			// `product_id` is used exclusively for Amazon.
			if ( empty( $product['product_id'] ) ) {
				continue;
			}

			$reformatted[] = [
				'title'       => $product['title'],
				'asin'        => $product['product_id'],
				'button_type' => 'amazon',
			];
		}

		return $reformatted;
	}

	/**
	 * Check if a shortcode is for the Buy Now buttons we're auditing.
	 *
	 * @param array $atts Shortcode attributes.
	 * @return bool
	 */
	protected function _shortcode_is_buy_now( array $atts ): bool {
		return isset( $atts['button_type'] ) && 'amazon' === $atts['button_type'];
	}

	/**
	 * Filter article's JSON representation down to just its Buy Now components.
	 *
	 * @param array $json Article data to be converted to JSON.
	 * @return array
	 */
	protected function _extract_products_from_json( array $json ): array {
		$components = [];

		// Components may be ungrouped if no images are extracted.
		if ( isset( $json['components'] ) && is_array( $json['components'] ) ) {
			$components = $json['components'];
		}

		// Find body group, if components are grouped.
		foreach ( $components as $component_wrapper ) {
			if (
				! is_array( $component_wrapper )
				|| ! isset(
					$component_wrapper['role'],
					$component_wrapper['components']
				)
				|| 'container' !== $component_wrapper['role']
			) {
				continue;
			}

			// body group won't have `textStyle` set.
			if ( isset( $component_wrapper['textStyle'] ) ) {
				continue;
			}

			$components = $component_wrapper['components'];
			break;
		}

		$components = array_filter(
			$components,
			[ $this, '_component_is_buy_now' ]
		);
		return array_values( $components );
	}

	/**
	 * Check if a component represents a Buy now button.
	 *
	 * @param array $component Article component.
	 * @return bool
	 */
	protected function _component_is_buy_now( array $component ): bool {
		// Host is hardcoded in `\PMC\Store_Products\Amazon_Api::_set_payload()`.
		return
			'link_button' === $component['role']
			&& 'buy-button-layout' === $component['layout']
			&& 'www.amazon.com' === wp_parse_url(
				$component['URL'],
				PHP_URL_HOST
			);
	}

	/**
	 * Store results from Buy Now button audit.
	 *
	 * @param int   $post_id        Post ID.
	 * @param int   $retries        Current retry attempt.
	 * @param array $results        Audit results.
	 * @param array $shortcode_atts Shortcode attributes.
	 * @param array $products       Products parsed from JSON.
	 */
	protected function _log_buy_now_audit(
		int $post_id,
		int $retries,
		array $results,
		array $shortcode_atts,
		array $products
	): void {
		$mismatch_meta = get_post_meta(
			$post_id,
			static::META_KEY_BUY_NOW_BUTTONS,
			true
		);

		if ( ! is_array( $mismatch_meta ) ) {
			$mismatch_meta = [];
		}

		$mismatch_meta[ $retries ] = [
			'asins'     => wp_list_pluck(
				$shortcode_atts,
				'asin'
			),
			'urls'      => wp_list_pluck(
				$products,
				'URL'
			),
			'errors'    => $results,
			'timestamp' => microtime(),
		];

		update_post_meta(
			$post_id,
			static::META_KEY_BUY_NOW_BUTTONS,
			$mismatch_meta
		);
	}

	/**
	 * Facilitate testing without extraneous delays.
	 *
	 * @return int
	 */
	protected function _get_sleep(): int {
		// The Store Products class caches for three minutes on failure.
		$value  = 3 * MINUTE_IN_SECONDS;
		$value += wp_rand( 20, 30 );

		if (
			( defined( 'IS_UNIT_TEST' ) && true === IS_UNIT_TEST )
			|| class_exists( '\WP_UnitTestCase', false )
		) {
			$value = apply_filters(
				'pmc_apple_news_json_audit_sleep_mock',
				$value
			);
		}

		return $value;
	}
}
